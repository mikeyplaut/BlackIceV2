//variables
//main stuff
float DefaultX = 420;
float DefaultY = 50;
float DefaultShader = 125;
bool game;
bool pre;
const char* Menu = "default";
const char* menustr = "default opts";
char* menuOptions[18] = {""};
bool forceHostEnabled = false;
int forceHostTimeout = 0;
int prestigeNum;
char selected[100];
bool Draw = false;
const char* print_s = "";
float Energy = 0;


//Modifications
bool nonUAV = false;
bool nonRedBoxes = false;
bool nonSteadyAim = false;
bool nonNoRecoil = false;
bool nonLaser = false;
bool nonFOV = false;
bool nonFOV1 = false;
bool nonFOV2 = false;
bool nonThirdPerson = false;
bool nonFPS = false;
bool nonHealth = false;
bool nonSuperSOH = false;

//Addresses & Defination
opd_s UI_DrawText_p = { 0x23A138, TOC };
opd_s UI_GetFont = { 0x239D88, TOC };
opd_s GetScrPos = {0xDB9B0,TOC};
opd_s srect = {0x229FA0,TOC};
opd_s srect2 = {0x23B928,TOC};
void (*FillRect)(ScreenPlacement *scrPlace, float x, float y, float width, float height, int horzAlign, int vertAlign, const float *color) = (void(*)(ScreenPlacement*,float,float,float,float,int,int,const float*))&srect;
void (*EmptyRect)(ScreenPlacement *scrPlace, float x, float y, float width, float height, int horzAlign, int vertAlign, float size, const float *color) = (void(*)(ScreenPlacement*,float,float,float,float,int,int,float,const float*))&srect2;
void(*UI_DrawText)(ScreenPlacement* scrPlace, const char *text, int maxChars, Font_s* font, float x, float y, int horzAlign, int vertAlign, float scale, const float *color, int style) = (void(*)(ScreenPlacement*,const char*, int, Font_s*, float, float, int, int, float, const float*,int))&UI_DrawText_p;
Font_s*(*UI_GetFontHandle)(ScreenPlacement* scrPlace, int fontEnum, float scale) = (Font_s*(*)(ScreenPlacement*, int, float))&UI_GetFont;
//Menu Colors
float White[4] = { 1, 1, 1, 0};
float White4[4] = { 1, 1, 1, 0};
float BlackShader[4] = {0, 0, 0, 0};
float Black[4] = {0, 0, 0, 0};
//Other Hud Colors
float WhiteC[4] = { 1, 1, 1, 1};
float Blue[4] = {0, .25, 1, 1};
float Cyan[4] = {0, 1, 1, 1};
float Red[4] = { 1, 0, 0, 1};
float Green[4] = { 0, 1, 0, 1};

//Finds Proper Screen Placement
ScreenPlacement* (*GetScreenPlacement)(int) = (ScreenPlacement* (*)(int))&GetScrPos;
ScreenPlacement* CalcScreen()
{
	 ScreenPlacement* ret = GetScreenPlacement(0);
	 return ret;
}
//Drawing Calls
void DrawFillRect_UI(float x,float y,float width,float height,const float* color)
{
	ScreenPlacement* scr = CalcScreen();
	FillRect(scr,x,y,width,height,0,0,color);
}
void DrawRect_UI(float x,float y,float width,float height,float size,const float* color)
{
	ScreenPlacement* scr = CalcScreen();
	EmptyRect(scr,x,y,width,height,0,0,size,color);
}
void DrawText_UI(const char *Text, int font, float x, float y, float scale, const float *color)
{
	ScreenPlacement* scr = CalcScreen();
    Font_s* font_p = UI_GetFontHandle(scr,font,scale);
	UI_DrawText(scr,Text,0x7FFFFFFF,font_p,x,y,0,0,scale,color,0);
}
void Print(const char* s)
{
	print_s = s;
	Draw = true;
	sleep(20);
	Draw = false;
}

//menu namespace
int selectedMenu = 0;
int selectedOption = 0;
int currentOptionCount = 0;
int lastMenus[20];
int lastMenuCount = 0;
namespace MENUS {
enum MENUS {
	Closed,
	MainMenu,
	Account,
	Infections,
	Names,
	Self,
	AimbotMenu,
	Presets,
	Esp
};
}



//pregame stuff
void addOption(char *text) {
	*(unsigned int*)0x0729440 = 0x10070200;
	//*(char*)0x00253AC8 = 0x40;
	char fourty[] = {0x40};
	write_process(0x00253AC8,fourty,1);
	strcpy((char*)(0x10070200+strlen((char*)0x10070200)),text);
	if (currentOptionCount == selectedOption)
		strcpy((char*)(0x10070200+strlen((char*)0x10070200))," ^1<-");
	strcpy((char*)(0x10070200+strlen((char*)0x10070200)),"^7\n");
	currentOptionCount++;
}
void addTitle(char *text) {
	*(float*)0x007291A4 = 0.27f;//font
	*(float*)0x00729418 = 180.0f;//x
	*(float*)0x00729318 = 2.0f;//y

	*(unsigned int*)0x0729440 = 0x10070200;//set pointer
	//*(char*)0x00253AC8 = 0x40;//enable     this part messes up on ita for some reason (NOW KNOWN. ITA DID NOT REMOVE MEMORY LIMITATIONS. AKA NEED COBRA MODE!!!)
	//*(int*)0x00253AC8 = 0x60000000;
	char fourty[] = {0x40};
	write_process(0x00253AC8,fourty,1);
	strcpy((char*)(0x10070200+strlen((char*)0x10070200)),"\n^5");
	strcpy((char*)(0x10070200+strlen((char*)0x10070200)),text);
	strcpy((char*)(0x10070200+strlen((char*)0x10070200)),"\n^7");
}
void resetOptions() {
	int len = strlen((char*)0x10070200);
	for (int i = 0; i < len+1; i++) {
		*(char*)(0x10070200+i) = 0;
	}
	for(int i = 0; i <18; i++)
		menuOptions[i] = "";
}

void openMenu() {
	lastMenuCount = 0;
	selectedMenu = MENUS::MainMenu;
	selectedOption = 0;
	sleep(40);
}
void closeMenu() {
	lastMenuCount = 0;
	selectedMenu = MENUS::Closed;
	selectedOption = 0;
	sleep(40);
}
void OpenMenu()
{
	//Shows HUDS
	White[3] = 1;
	BlackShader[3] = .4;
	//Slide Effect
	 for(float i = 950; i >= 420;i-= 3)
     {
		 DefaultX = i;
		 sleep(3);
	 }
	 openMenu();
}

//Close Menu Func
void CloseMenu()
{
	DefaultX = 950;
	//Hides HUDS
    White[3] = 0;
	BlackShader[3] = 0;
	closeMenu();
	//Disables Menu Controls
	//Open = false;
}
void openSubmenu(int menu) {
	lastMenus[lastMenuCount] = selectedMenu;
	lastMenuCount++;
	selectedMenu = menu;
	selectedOption = 0;
	sleep(100);
}
void goBack() {
	if (lastMenuCount == 0) {
		CloseMenu();
	} else {
		lastMenuCount--;
		selectedMenu = lastMenus[lastMenuCount];
		selectedOption = 0;
	}
	sleep(100);
}
int getOption() {
	if (pressedButton(Square)) {
		sleep(100);
		return selectedOption;
	}
	return -1;
}
bool allowPressedUp = true;
bool allowPressedDown = true;
void otherControls() {
	bool up = pressedButton(DpadUp);
	bool down = pressedButton(DpadDown);
	if (up) {
		if (allowPressedUp) {
			up = false;
		}
		allowPressedUp = true;
	} else {
		allowPressedUp = false;
	}

	if (down) {
		if (allowPressedDown) {
			down = false;
		}
		allowPressedDown = true;
	} else {
		allowPressedDown = false;
	}

	if (Dvar_GetBool("cl_ingame"))//Checks if we're in-game
	{
		if (pressedButton(Circle))
			goBack();
	}
	else
	{
		if (pressedButton(Left))
			goBack();
	}
	if (up) {
		selectedOption--;
		if (selectedOption < 0)
			selectedOption = currentOptionCount-1;
		//sleep(50);
	}
	if (down) {
		selectedOption++;
		if (selectedOption > currentOptionCount-1)
			selectedOption = 0;
		//sleep(50);
	}
}
int printTimer = 0;
char *printText;
bool printB = false;
bool printBoolValue = false;

void print(char *Text) {
	printTimer = 50;
	printText = Text;
	printB = false;
}
void printBool(char *Text, bool value) {
	printTimer = 50;
	printText = Text;
	printBoolValue = value;
	printB = true;
}
void printLoop() {
	if (printTimer > 0) {
		*(unsigned int*)0x0729440 = 0x10070200;
		//*(char*)0x00253AC8 = 0x40;
		char fourty[] = {0x40};
		write_process(0x00253AC8,fourty,1);
		strcpy((char*)(0x10070200+strlen((char*)0x10070200)),"           ^2");
		strcpy((char*)(0x10070200+strlen((char*)0x10070200)),printText);
		if (printB) {
			if (printBoolValue)
				strcpy((char*)(0x10070200+strlen((char*)0x10070200)),": ^5Enabled");
			else
				strcpy((char*)(0x10070200+strlen((char*)0x10070200)),": ^1Disabled");
		}
		strcpy((char*)(0x10070200+strlen((char*)0x10070200)),"^7\n");
		printTimer--;
	}
}




//functions
void nonLevel70()
{
    Cbuf_AddText("setPlayerData experience 2516000");
	sleep(200);
}
void nonUnlockAll()
{
	unsigned char UnlockAll[] = { 0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x04, 0x02, 0x04, 0x04, 0x04, 0x02, 0x04, 0x04, 0x02, 0x02, 0x03, 0x03, 0x03, 0x02, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xF4, 0x30, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x61, 0x08, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0x40, 0x24, 0x14, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x13, 0x00, 0x18, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFA, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xDD, 0x99, 0x03 };
	write_process(0x01ffa0c7, UnlockAll, sizeof(UnlockAll));
	addOption("^2Done!");
	sleep(200);
}
void nonPrestige()
{
	sleep(200);
	if(prestigeNum == 0)
	{
		Cbuf_AddText("setPlayerData prestige 0");
		print("Prestige: ^7[^20^7]");
		prestigeNum = 1;
	}
	else if(prestigeNum == 1)
	{
		Cbuf_AddText("setPlayerData prestige 1");
		print("Prestige: ^7[^21^7]");
		prestigeNum = 2;
	}
	else if(prestigeNum == 2)
	{
		Cbuf_AddText("setPlayerData prestige 2");
		print("Prestige: ^7[^22^7]");
		prestigeNum = 3;
	}
	else if(prestigeNum == 3)
	{
		Cbuf_AddText("setPlayerData prestige 3");
		print("Prestige: ^7[^23^7]");
		prestigeNum = 4;
	}
	else if(prestigeNum == 4)
	{
		Cbuf_AddText("setPlayerData prestige 4");
		print("Prestige: ^7[^24^7]");
		prestigeNum = 5;
	}
	else if(prestigeNum == 5)
	{
		Cbuf_AddText("setPlayerData prestige 5");
		print("Prestige: ^7[^25^7]");
		prestigeNum = 6;
	}
	else if(prestigeNum == 6)
	{
		Cbuf_AddText("setPlayerData prestige 6");
		print("Prestige: ^7[^26^7]");
		prestigeNum = 7;
	}
	else if(prestigeNum == 7)
	{
		Cbuf_AddText("setPlayerData prestige 7");
		print("Prestige: ^7[^27^7]");
		prestigeNum = 8;
	}
	else if(prestigeNum == 8)
	{
		Cbuf_AddText("setPlayerData prestige 8");
		print("Prestige: ^7[^28^7]");
		prestigeNum = 9;
	}
	else if(prestigeNum == 9)
	{
		Cbuf_AddText("setPlayerData prestige 9");
		print("Prestige: ^7[^29^7]");
		prestigeNum = 10;
	}
	else if(prestigeNum == 10)
	{
		Cbuf_AddText("setPlayerData prestige 10");
		print("Prestige: ^7[^210^7]");
		prestigeNum = 11;
	}
	else if(prestigeNum == 11)
	{
		Cbuf_AddText("setPlayerData prestige 11");
		print("Prestige: ^7[^211^7]");
		prestigeNum = 0;
	}
	sleep(300);
}
void NonHostEndGame()
{
	addOption("Ending Game");
	char buffer[0x100];
	sprintf(buffer, "cmd mr %i %i %s", *(int*)(0x1BE5BE8), 3, "endround");
	Cbuf_AddText(buffer);
	sleep(500);
	resetOptions();
	//Cbuf_AddText("togglemenu;openmenu popup_endgame"); //"lazy way" all cod?
}

void NONHOST_THREAD(uint64_t nothing)
{
	//Disable Cheat Protection
    unsigned char nop[4] = {0x60, 0x00, 0x00, 0x00};
    write_process(0x2383A8, nop, 4);//Remove invalid char(s) check
	*(char*)0x007EDCA4 = 0x0;//non host end game fix
	sys_ppu_thread_t id2;
	sys_ppu_thread_create(&id2,Aimthread,0,0x5AA,0x8000,0,"Aimbot");
	Cbuf_AddText("set Iusb \"ui_mapname \\\"\"mp_rust;^1CFG ^2INFECTION;bind button_back exec ../../../dev_usb000/buttons_default.cfg\";");
	Cbuf_AddText("set Iaim \"ui_mapname \\\"\"mp_rust;^1STRONG AIMBOT + UAV;set perk_bulletDamage 999;bind APAD_LEFT g_compassShowEnemies 1;bind APAD_RIGHT aim_autoaim_enabled 2;aim_lockon_region_height 480;aim_lockon_region_width 640;aim_lockon_enabled 1;aim_lockon_strength 1;aim_lockon_deflection 0;aim_autoaim_enabled 1;aim_autoaim_region_height 480;aim_autoaim_region_width 640;aim_slowdown_yaw_scale_ads 0;aim_slowdown_yaw_scale 0;aim_slowdown_pitch_scale 0;aim_slowdown_pitch_scale_ads 0;aim_slowdown_region_height 0;aim_slowdown_region_width 0;aim_slowdown_enabled 1;aim_aimAssistRangeScale 2;aim_autoAimRangeScale 2;set cg_drawfps 2;clanname PRO;set perk_weapSpreadMultiplier 0.0001\";");
	Cbuf_AddText("set Igm \"ui_mapname \\\"\"mp_rust;^1God Mode Infection ^1(Press ^1Down ^1To ^1Activate)^7;bind dpad_down toggle xblive_privatematch 0 1;toggle xblive_rankedmatch 1 0;bind APAD_DOWN g_compassShowEnemies 1;bind APAD_UP clanname PRO\";");
	Cbuf_AddText("set Isj \"ui_mapname \\\"\"mp_rust;^1Super ^3Jump^7 (SELECT TO ACTIVATE);bind BUTTON_BACK toggle jump_height 1000 39\";");
	Cbuf_AddText("set Imm \"ui_mapname \\\"\"mp_rust;^9Mini-Menu^7;bind APAD_LEFT bind DPAD_UP vstr 1;set 1 \\\"\"set g_compassShowEnemies 1;set cg_drawfps 2;set clanname PRO;say ^1Infectable Mini-^5Menu;say ^1>^6Super_Jump^1<;say ^5Timescale;say ^5Gravity;bind dpad_up vstr 3;bind dpad_down vstr 2;bind dpad_left vstr e;bind button_a toggle jump_height 39 150 999;set 2 \\\"\"say ^5Infectable Mini-^5Menu;say ^5Super_Jump;say ^1>^6Timescale^1<;say ^5Gravity;bind dpad_up vstr 1;bind dpad_down vstr 3;bind button_a toggle timescale 0.5 1 1.5;set 3 \\\"\"say ^5Infectable Mini-^5Menu;say ^5Super_Jump;say ^5Timescale;say ^1>^6Gravity^1<;bind dpad_up vstr 2;bind button_a toggle g_gravity 200 800 3000;set e \\\"\"say ^7;say ^7;say ^7;say ^1MENU ^5CLOSED;say ^1;say ^1;say ^1;say ^1;bind dpad_up vstr 1;bind dpad_left +actionslot 3;bind BUTTON_A +gostand\"\\\"\"\";");
	Cbuf_AddText("set FHF \"^1OFF;reset party_connectTimeout; reset party_host; reset party_hostmigration; reset onlinegame; reset onlinegameandhost; reset onlineunrankedgameandhost; reset migration_msgtimeout; reset migration_timeBetween; reset migration_verboseBroadcastTime; reset migrationPingTime; reset bandwidthtest_duration; reset bandwidthtest_enable; reset bandwidthtest_ingame_enable; reset bandwidthtest_timeout; reset cl_migrationTimeout; reset lobby_partySearchWaitTime; reset bandwidthtest_announceinterval; reset partymigrate_broadcast_interval; reset partymigrate_pingtest_timeout; reset partymigrate_timeout; reset partymigrate_timeoutmax; reset partymigrate_pingtest_retry;reset partymigrate_pingtest_timeout; reset g_kickHostIfIdle; reset sv_cheats; reset scr_dom_scorelimit; reset xblive_playEvenIfDown; reset party_hostmigration; reset badhost_endGameIfISuck ; reset badhost_maxDoISuckFrames; reset badhost_maxHappyPingTime ; reset badhost_minTotalClientsForHappyTest ; reset bandwidthtest_enable;\";");
	for(;;)
	{
		if (!isInGameOrLoading()) {
			//in lobby and lobby only
			if (forceHostEnabled) {
				if (forceHostTimeout > 50)
					forceHostTimeout = 0;
				if (forceHostTimeout == 0) {
					printf("Ran force host script\n");
					Cbuf_AddText("xsearchforgames;");
				}
				forceHostTimeout++;
			}
		}
		if (Dvar_GetBool("cl_ingame"))//Checks if we're in-game
		{
			if(!game)
			{
				CloseMenu();
				game = true;
				pre = false;
			}
			resetOptions();

			//set shader backgrounds
			if(selectedMenu == MENUS::Self)
				DefaultShader = 215;
			else 
				DefaultShader = 125;
			//in-game menu
			switch(selectedMenu)
			{
			case MENUS::Closed:
				if(pressedButton(L2)&&pressedButton(Right))
					OpenMenu();
				break;
			case MENUS::MainMenu:
				Menu = "Main Menu";
				menuOptions[0] = "Self Menu", menuOptions[1] = "Aimbot Menu", menuOptions[2] = "Aimbot Presets",menuOptions[3] = "ESP Menu";
				currentOptionCount = 4;
				snprintf(selected,sizeof(selected), "^5|^7%s^5|^7", menuOptions[selectedOption]);
				menuOptions[selectedOption] = selected;
				
				switch(getOption())
				{
				case 0:
					openSubmenu(MENUS::Self);
					break;
				case 1:
					openSubmenu(MENUS::AimbotMenu);
					break;
				case 2:
					openSubmenu(MENUS::Presets);
					break;
				case 3:
					openSubmenu(MENUS::Esp);
					break;
				}
				break;
			case MENUS::Self:
				Menu = "Self Menu";
				menuOptions[0] = "Constant UAV",menuOptions[1] = "Red Boxes", menuOptions[2] = "Steady Aim",menuOptions[3] = "No Recoil",
					menuOptions[4] = "Laser",menuOptions[5] = "Health Bar",menuOptions[6] = "FOV",menuOptions[7] = "3rd Person",
					menuOptions[8] = "Show FPS",menuOptions[9] = "Reload Color",menuOptions[10] = "Lobby Message",menuOptions[11] = "Dvar Command",
					menuOptions[12] = "Super Sleight of Hand";
				currentOptionCount = 13;
				snprintf(selected,sizeof(selected), "^7|^5%s^7|", menuOptions[selectedOption]);
				menuOptions[selectedOption] = selected;

				switch(getOption())
				{
				case 0://uav
					if(!nonUAV)
					{
						nonUAV = true;
						Cbuf_AddText("g_compassShowEnemies 1");
						sleep(20);
						Print("Constant UAV [^2Enabled^7]");
					}
					else
					{
						nonUAV = false;
						Cbuf_AddText("g_compassShowEnemies 0");
						sleep(20);
						Print("Constant UAV [^1Disabled^7]");
					}
					break;
				case 1://red
					if(!nonRedBoxes)
					{
						nonRedBoxes = true;
						unsigned char byte[4] = {0x2F, 0x80, 0x00, 0x01};
						write_process(0x496F4,byte,4);
							
						sleep(20);
						Print("Red Boxes [^2Enabled^7]");
					}
					else
					{
						nonRedBoxes = false;
						unsigned char byte[4] = {0x2F, 0x80, 0x00, 0x00};
						write_process(0x496F4,byte,4);
						sleep(20);
						Print("Red Boxes [^1Disabled^7]");
					}
					break;
				case 2:///steady
					if(!nonSteadyAim)
					{
						nonSteadyAim = true;
						unsigned char byte[4] = {0x2F, 0x80, 0x00, 0x00};
						write_process(0x335E0,byte,4);
						sleep(20);
						Print("Steady Aim [^2Enabled^7]");
					}
					else
					{
						nonSteadyAim = false;
						unsigned char byte[4] = {0x2F, 0x80, 0x00, 0x01};
						write_process(0x335E0,byte,4);
						sleep(20);
						Print("Steady Aim [^1Disabled^7]");
					}
					break;
				case 3://recoil
					if(!nonNoRecoil)
					{
						nonNoRecoil = true;
						unsigned char byte[4] = {0x60,0x00,0x00,0x00};
						write_process(0x9342C,byte,4);
						Cbuf_AddText("player_breath_gasp_lerp 0");
						sleep(20);
						Print("No Recoil [^2Enabled^7]");
					}
					else
					{
						nonNoRecoil = false;
						unsigned char byte[4] = {0x4B,0xFA,0x10,0xF5};
						write_process(0x9342C,byte,4);
						Cbuf_AddText("player_breath_gasp_lerp 1");
						sleep(20);
						Print("No Recoil [^1Disabled^7]");
					}
					break;
				case 4://laser
					if(!nonLaser)
					{
						nonLaser = true;
						unsigned char byte[4] = {0x39,0x40,0x00,0x01};
						write_process(0x8C7B8,byte,4);
						sleep(20);
						Print("Laser [^2Enabled^7]");
					}
					else
					{
						nonLaser = false;
						unsigned char byte[4] = {0x39,0x40,0x00,0x00};
						write_process(0x8C7B8,byte,4);
						sleep(20);
						Print("Laser [^1Disabled^7]");
					}
					break;
				case 5://health
					if(!nonHealth)
					{
						nonHealth = true;
						White4[3] = 1;
						Red[3] = 1;
						sleep(20);
						Print("Health Bar [^2Enabled^7]");
					}
					else
					{
						nonHealth = false;
						White4[3] = 0;
						Red[3] = 0;
						sleep(20);
						Print("Health Bar [^1Disabled^7]");
					}
					break;
				case 6://fov
					if(!nonFOV)
					{
						nonFOV = true;
						Cbuf_AddText("cg_fov 90");
						sleep(20);
						Print("FOV[^290^7]");
						nonFOV1 = false;
					}
					else if (!nonFOV1)
					{
						nonFOV1 = true;
						Cbuf_AddText("cg_fov 120");
						sleep(20);
						Print("FOV[^2120^7]");
						nonFOV2 = false;
					}
					else if (!nonFOV2)
					{
						nonFOV2 = true;
						Cbuf_AddText("cg_fov 65");
						sleep(20);
						Print("FOV[^265^7]");
						nonFOV = false;
					}
					break;
				case 7://3rd
					if(!nonThirdPerson)
					{
						nonThirdPerson = true;
						Cbuf_AddText("cg_ThirdPerson 1");
						sleep(20);
						Print("Third Person [^2Enabled^7]");
					}
					else
					{
						nonThirdPerson = false;
						Cbuf_AddText("cg_ThirdPerson 0");
						sleep(20);
						Print("Third Person [^1Disabled^7]");
					}
					break;
				case 8://fps
					if(!nonFPS)
					{
						nonFPS = true;
						Cbuf_AddText("cg_drawfps 1");
						sleep(20);
						Print("FPS [^2Enabled^7]");
					}
					else
					{
						nonFPS = false;
						Cbuf_AddText("cg_drawfps 0");
						sleep(20);
						Print("FPS [^1Disabled^7]");
					}
					break;
				case 9://reload color
					Cbuf_AddText("lowAmmoWarningColor1 1 .5 0 1");
					Cbuf_AddText("lowAmmoWarningColor2 0 1 0 1");
					Cbuf_AddText("lowAmmoWarningColor3 1 .5 0 1");
					Cbuf_AddText("lowAmmoWarningNoAmmoColor1 1 0 0 1");
					Cbuf_AddText("lowAmmoWarningNoAmmoColor2 1 .4 0 1");
					Cbuf_AddText("lowAmmoWarningNoReloadColor1 0 0 1 1");
					Cbuf_AddText("lowAmmoWarningNoReloadColor2 0 1 0 ");
					sleep(20);
					Print("Ammo Colors [^2Set^7]");
					break;
				case 10://lobby message
					char* dvar = (char*)CallKeyBoard("Enter Custom Message");
					char buf[100];
					sprintf(buf,"say %s\0",dvar);
					Cbuf_AddText(buf);
					sleep(20);
					break;
				case 11://dvar command
					char* dvarr = (char*)CallKeyBoard("Enter DVAR Command");
					Cbuf_AddText(dvarr);
					sleep(20);
					break;
				case 12://ssoh
					if(!nonSuperSOH)
					{
						nonSuperSOH = true;
						Cbuf_AddText("perk_weapreloadmultiplier 0.0001");
						sleep(20);
						Print("Super Slight of Hand [^2Enabled^7]");
					}
					else
					{
						nonSuperSOH= false;
						Cbuf_AddText("perk_weapreloadmultiplier 1");
						sleep(20);
						Print("Super Slight of Hand [^1Disabled^7]");
					}
					break;
				}
				break;
			case MENUS::AimbotMenu:
				Menu = "Aimbot Menu";
				menuOptions[0] = "Toggle",menuOptions[1] = "Aiming Required", menuOptions[2] = "Visible Required",menuOptions[3] = "Shoot to Enable",
					menuOptions[4] = "Auto Shoot",menuOptions[5] = "Semi Auto Mode",menuOptions[6] = "Silent Aimbot";
				currentOptionCount = 7;
				snprintf(selected,sizeof(selected), "^7|^5%s^7|", menuOptions[selectedOption]);
				menuOptions[selectedOption] = selected;

				switch(getOption())
				{
				case 0:
					aimbot = !aimbot;
					if(aimbot)
						Print("^2Aimbot: ON");
					else
						Print("^1Aimbot: OFF");
					break;
				case 1:
					Required = !Required;
					if(Required)
						Print("^2Required: ON");
					else
						Print("^1Required: OFF");
					break;
				case 2:
					visibleOnly = !visibleOnly;
					if(visibleOnly)
						Print("^2Only Aim To Visible: ON");
					else
						Print("^1Only Aim To Visible: OFF");
					break;
				case 3:
					shootToEnable = !shootToEnable;
					Required = true;
					if(shootToEnable)
						Print("^2Shoot To Enable: ON");
					else
						Print("^1Shoot To Enable: OFF");
					break;
				case 4:
					autoShoot = !autoShoot;
					if(autoShoot)
						Print("^2Auto Shoot Visible Players: ON");
					else
						Print("^1Auto Shoot Visible Players: OFF");
					break;
				case 5:
					semiAutoMode = !semiAutoMode;
					if(semiAutoMode)
						Print("^2Semi Auto Mode: ON");
					else
						Print("^1Semi Auto Mode: OFF");
					break;
				case 6:
					silentAimbot = !silentAimbot;
					if(silentAimbot)
						Print("^2Silent Aimbot: ON");
					else
						Print("^1Silent Aimbot: OFF");
					break;
				}
				break;
			case MENUS::Presets:
				Menu = "Aimbot Presets";
				menuOptions[0] = "Paradise Special",menuOptions[1] = "Paradise Special (Semi Auto)", 
					menuOptions[2] = "Akimbo Aimbot",menuOptions[3] = "Run-n-Gun (Basic Smart Strong Aimbot)";
				currentOptionCount = 4;
				snprintf(selected,sizeof(selected), "^7|^5%s^7|", menuOptions[selectedOption]);
				menuOptions[selectedOption] = selected;

				switch(getOption())
				{
				case 0:
					aimbot = true;
					Required = true;
					visibleOnly = true;
					shootToEnable = false;
					autoShoot = true;
					semiAutoMode = false;
					UnfairAimbot = false;
					silentAimbot = false;
					autoAim = false;
					Print("Set");
					break;
				case 1:
					aimbot = true;
					Required = true;
					visibleOnly = true;
					shootToEnable = false;
					autoShoot = true;
					semiAutoMode = true;
					UnfairAimbot = false;
					silentAimbot = false;
					autoAim = false;
					Print("Set");
					break;
				case 2:
					aimbot = true;
					Required = false;
					visibleOnly = false;
					shootToEnable = true;
					autoShoot = false;
					semiAutoMode = false;
					UnfairAimbot = false;
					silentAimbot = false;
					autoAim = false;
					Print("Set");
					break;
				case 3:
					aimbot = true;
					Required = true;
					visibleOnly = false;
					shootToEnable = false;
					autoShoot = false;
					semiAutoMode = false;
					UnfairAimbot = false;
					silentAimbot = false;
					autoAim = false;
					print("Set");
					break;
				}
				break;
			case MENUS::Esp:
				Menu = "Esp Menu";
				menuOptions[0] = "Not finished :(";
				currentOptionCount = 1;
				snprintf(selected,sizeof(selected), "^7|^5%s^7|", menuOptions[selectedOption]);
				menuOptions[selectedOption] = selected;

				switch(getOption())
				{
				case 0:
					break;
				case 1:
					break;
				case 2:
					break;
				}
				break;
			default:
				CloseMenu();
				break;
			}
		}
		else//pregame
		{
			if(!pre)
			{
				CloseMenu();
				game = false;
				pre = true;
			}
			resetOptions();
			//pregame menu
			switch(selectedMenu)
			{
			case MENUS::Closed:
				if(pressedButton(L2)&&pressedButton(Right))
					openMenu();
				addTitle("Click \x12 + \x17 to open lobby menu\n\x3 to select\n\x16 to go back/close");
				break;
			case MENUS::MainMenu:
				addTitle("^5Black Ice: ^1Pregame^7");
				addOption("Account Menu");
				addOption("Infection Menu");
				addOption("Name Menu");
				addOption("Force Host ^2ON");
				addOption("Force Host ^1OFF");
				switch(getOption())
				{
				case 0:
					openSubmenu(MENUS::Account);
					break;
				case 1:
					openSubmenu(MENUS::Infections);
					break;
				case 2:
					openSubmenu(MENUS::Names);
					break;
				case 3:
					Cbuf_AddText("reset party_autoteams;xblive_privatematch 0;xblive_rankedmatch 1;disconnect;killserver;disconnect;xstartlobby;set party_connectToOthers 0;xsearchforgames;wait 200;xsearchforgames;set party_hostmigration 0;set party_gameStartTimerLength 1;set party_pregameStartTimerLength 1;set party_timer 1;set party_minplayers 2;wait 200;reset party_autoteams;xsearchforgames;");
					forceHostTimeout = 1;
					forceHostEnabled = true;
					print("Force Host Enabled!");
					break;
				case 4:
					forceHostEnabled = false;
					Cbuf_AddText("vstr FHF;");
					print("Force Host Disabled!");
					break;
				}
				break;
			case MENUS::Account:
				addTitle("^5Account Menu^7");
				addOption("Level 70");
				addOption("Unlock All");
				addOption("Select Prestige");
				switch(getOption())
				{
				case 0 :
					nonLevel70();
					break;
				case 1:
					nonUnlockAll();
					break;
				case 2:
					nonPrestige();
					break;
				}
				break;
				case MENUS::Infections:
				addTitle("Infections");
				addOption("USB/CFG");
				addOption("Aimbot");
				addOption("God Mode");
				addOption("Super Jump");
				addOption("Mini Menu");
				switch (getOption()) {
				case 0:
					Cbuf_AddText("vstr Iusb;");
					break;
				case 1:
					Cbuf_AddText("vstr Iaim;");
					break;
				case 2:
					Cbuf_AddText("vstr Igm;");
					break;
				case 3:
					Cbuf_AddText("vstr Isj;");
					break;
				case 4:
					Cbuf_AddText("vstr Imm;");
					break;
				}
				break;
			case MENUS::Names:
				//names are 30 chars long
				addTitle("Modded Names");
				addOption("Custom Name");
				addOption("\x2^1Paradise^5SPRX^2.com\x2");
				addOption("Whiteboy7thst");
				addOption("Faze Rain");
				addOption("\x3^1Fuck CFG Modders\x3");
				addOption("^1Lol");
				addOption("^5Press \x1 + \x4 For Mods");
				addOption("Weird Button Name (^1Won't be able to join a game. Lobby ONLY^7)");
				switch(getOption()) {
				case 0:
					char* name = (char*)CallKeyBoard("Enter Custom Name");
					setName(name);
					break;
				case 1:
					setName("\x2^1Advertise\x2");
					break;
				case 2:
					setName("Whiteboy7thst");
					break;
				case 3:
					setName("Faze Rain");
					break;
				case 4:
					setName("\x3^1Fuck CFG Modders\x3");
					break;
				case 5:
					setName("^1Lol");
					break;
				case 6:
					setName("^5Press \x1 + \x4 For Mods");
					break;
				case 7:
					setName("\x1\xa\x2\xa\x1\xa\x2\xa\x1\xa\x2\xa\x1\xa\x2\xa\x1\xa\x2\xa\x1\xa\x2\xa\x1\xa\x2\xa\x1");//0x56D918 is a patch for the error      0x2179A8 = nop to bypass
					break;
				}
				break;
				}
			}
			printLoop();
			otherControls();
			sleep(50);
			currentOptionCount = 0;
		}
	}
	void hook() {
	//vec3 myOriginn = getOrigin(GetIndex());
	//vec3 myOrigin = {myOriginn.x,myOriginn.y,myOriginn.z+getHeight(GetIndex())};
	//printf("My Z: %s\n",FtoS(myOrigin.z));
	if (*(bool*)0x01D17A8C) {
		//SV_GetUsercmd(GetIndex(),0x10070500);
		GetBonePos(GetIndex());
		vec3 me = {retttt.x,retttt.y,retttt.z};
		playerHeadCoords[GetIndex()].x = me.x;
		playerHeadCoords[GetIndex()].y = me.y;
		playerHeadCoords[GetIndex()].z = me.z-56;
		//if (Centity(0) != -1)
		 for (int i = 0; i < 18; i++) {
			 //if (killclients[i]) {
			 //	 killClientReal(i);
			 //	 killclients[i] = false;
			 //}
			 if(GetIndex() != i) {
				 if (isAlive(i)) {
					//dropHeightArray[i] = getDrop(i);
					//vec3 theirOriginn = getOrigin(i);
					//vec3 theirOrigin = {theirOriginn.x,theirOriginn.y,theirOriginn.z+getHeight(i)};
					GetBonePos(i);
					vec3 them = {retttt.x,retttt.y,retttt.z};
					playerHeadCoords[i].x = them.x;
					playerHeadCoords[i].y = them.y;
					playerHeadCoords[i].z = them.z-56;
					//isPlayerVisible(i);
					playerVisibilities[i] = Trace(0,me/*myOrigin*//*getOrigin(GetIndex())*/,them/*theirOrigin*//*getOrigin(i)*/);/*isPlayerVisible(i);*//*Visible::IsVisible(getOrigin(i),56);//56*/
					//vec3 me = getOrigin(GetIndex());
					//vec3 them = getOrigin(i);
					//startA[0] = me.x;
					//startA[1] = me.y;
					//startA[2] = me.z;
					//endA[0] = them.x;
					//endA[1] = them.y;
					//endA[2] = them.z;
					//float cv = FX_GetClientVisibility(0,startA,endA)*100;
					//int g = (int)cv;
					//printf("Client %i: %i percent visible\n",i,g);
				 }
			 }
		 }
		 //Aimthread(0);
	}
	//printf("\n");
}